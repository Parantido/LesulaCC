package org.techfusion.view.components.classed {
	
	import flash.display.Stage;
	import flash.events.ErrorEvent;
	import flash.events.Event;
	import flash.events.LocationChangeEvent;
	import flash.filesystem.File;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.media.StageWebView;
	
	import mx.core.FlexGlobals;
	import mx.core.UIComponent;
	
	[Event(name="complete", type="flash.events.Event")]
	[Event(name="locationChange", type="flash.events.LocationChangeEvent")]
	[Event(name="locationChanging", type="flash.events.LocationChangeEvent")]
	
	public class EnhancedWebView extends UIComponent {
		
		private var _url:String;
		private var _text:String;
		
		protected var myStage:Stage;
		private var _stageWebView:StageWebView;
		
		public function get stageWebView():StageWebView {
			return _stageWebView;
		}
		
		public function EnhancedWebView() {
			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);
			focusEnabled = false;
		}
		
		public function set url(url:String):void {
			_url = url;
			
			if(_stageWebView) {
				_stageWebView.loadURL(url);
			}
		}
		
		public function set text(text:String):void {
			_text = text;
			
			if(_stageWebView) {
				_stageWebView.loadString(text);
			}
		}
		
		public function hide():void {
			_stageWebView.stage = null;
		}
		
		public function show():void {
			_stageWebView.stage = myStage;
		}
		
		public function dispose():void {
			hide();
			_stageWebView.dispose();
		}
		
		/**
		 * Resize Stage View based on Parent UI Component
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
			
			var runtimeDPI:int = FlexGlobals.topLevelApplication.runtimeDPI;
			var applicationDPI:int = FlexGlobals.topLevelApplication.applicationDPI;
			var point:Point;
			var scaledWidth:int;
			var scaledHeight:int;
			var scaleFactor:Number;
			var scaledY:int;
			
			if (_stageWebView) {
				point = localToGlobal(new Point());
				scaleFactor = runtimeDPI / applicationDPI;
				
				scaledWidth = width * scaleFactor;
				scaledHeight = height * scaleFactor;
				
				_stageWebView.viewPort = new Rectangle(point.x, point.y, scaledWidth, scaledHeight);
			}
		}
		
		protected function addedToStageHandler(event:Event):void {
			// Add To Stage
			myStage = event.currentTarget.document.stage;
			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
			
			// Initialize StageWebView
			_stageWebView = new StageWebView();
			_stageWebView.stage = myStage;
			_stageWebView.viewPort = new Rectangle(0, 0, myStage.width, myStage.fullScreenHeight);
			
			// Attach Event Listener
			_stageWebView.addEventListener(Event.COMPLETE, completeHandler);
			_stageWebView.addEventListener(ErrorEvent.ERROR, errorHandler);
			_stageWebView.addEventListener(LocationChangeEvent.LOCATION_CHANGING, locationChangingHandler);
			_stageWebView.addEventListener(LocationChangeEvent.LOCATION_CHANGE, locationChangeHandler);

			// Load Stage Content
			if(_url) {
				// Normalize source for app location path
				var fPath:String = new File(new File(_url).nativePath).url;
				_stageWebView.loadURL(fPath);
			} else if(_text) {
				_stageWebView.loadString(_text);
			}
			
			// adds support for keyboard events when not in focus
			invalidateProperties();
			invalidateDisplayList();
			
		}
		
		protected function removedFromStageHandler(event:Event):void {
			hide();
		}
		
		override public function get visible():Boolean {
			return super.visible;
		}
		
		override public function set visible(value:Boolean):void {
			super.visible = value;
			
			// Deinitialize Stage Web View Stage on Hide
			if(!value && _stageWebView) _stageWebView.stage = null;
			// Reinitialize Stage Web View with stored MyStage on Visible
			else if(value && _stageWebView && myStage) _stageWebView.stage = myStage;
				
			invalidateProperties();
			invalidateSize();
		}
		
		protected function completeHandler(event:Event):void {
			dispatchEvent(event.clone());
		}
		
		protected function locationChangingHandler(event:Event):void {
			dispatchEvent(event.clone());
		}
		
		protected function locationChangeHandler(event:Event):void {
			dispatchEvent(event.clone());
		}
		
		protected function errorHandler(event:Event):void {
			dispatchEvent(event.clone());
		}
	}
}