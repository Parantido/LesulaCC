<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		actionBarVisible="true" dataChange="{ viewUpdate(); }"
		viewActivate="{ viewActivate(); }" viewDeactivate="{ viewDeactivate(); }">
	
	<s:states>
		<s:State name="Calls"/>
		<s:State name="Stats"/>
	</s:states>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="searchType"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.puremvc.as3.patterns.facade.Facade;
			import org.techfusion.view.mediators.RightQueuesViewMediator;
			
			[Bindable] public  var callsIndex:Dictionary = new Dictionary();
			[Bindable] public  var queuesIndex:Dictionary = new Dictionary();
			[Bindable] public  var queuesMemberIndex:Dictionary = new Dictionary();
			[Bindable] public  var callsDataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] public  var queuesDataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] public  var queuesMemberDataProvider:ArrayCollection = new ArrayCollection();

			// Retrieve Facade Instance
			private var facade:Facade = ApplicationFacade.getInstance();
			
			// Track Left View Status
			private var leftViewStatus:String = "Queues";
			
			protected function viewActivate():void {
				// Registering Mediators
				if(!facade.hasMediator(RightQueuesViewMediator.NAME)) {
					facade.registerMediator(new RightQueuesViewMediator(this));
					
					// Dispatch Initialization Events
					dispatchEvent(new Event(ApplicationFacade.CREATE));
				}
				
				// Style Main DataGrid Appeareance
				gridCalls.setStyle("borderVisible", false);
				
				// Update by Base Status
				updateDataGrid("Queues");
				
				// Enable dataProvider Filter Function
				queuesDataProvider.filterFunction = statsFilterFunction;
				queuesMemberDataProvider.filterFunction = statsFilterFunction;
				
			}
			
			protected function viewDeactivate():void {
				// Unregistering Mediators
				if(facade.hasMediator(RightQueuesViewMediator.NAME)) {
					facade.removeMediator(RightQueuesViewMediator.NAME);
					// Dispatch Deinitialization Events
					dispatchEvent(new Event(ApplicationFacade.DESTROY));
				}
			}
			
			private function searchDataProvider(evt:Event):void {
				switch(leftViewStatus) {
					case "Queues":
						queuesDataProvider.refresh();
						break;
					case "Agents":
						queuesMemberDataProvider.refresh();
						break;
				}
			}
			
			protected function statsFilterFunction(obj:XML):Boolean {
				if(leftViewStatus == "Queues") {
					if(String(obj.Queue).toLowerCase().indexOf(txtFilter.text.toLowerCase()) > -1) {
						if(chkFilter.selected) { return false; } else { return true; }
					}
				} else if(leftViewStatus == "Agents") {
					if(String(obj.Name).toLowerCase().indexOf(txtFilter.text.toLowerCase()) > -1) {
						if(chkFilter.selected) { return false; } else { return true; }
					}
				}
				
				if(chkFilter.selected) { return true; } else { return false; }
			}
			
			/**
			 * Update right View with data passed by left View
			 */
			protected function viewUpdate():void {
				// Handle data passed by left View
				if(data) {
					// Track Left View Status
					leftViewStatus = String(data.view);
					// Update Dinamic Stats DataGrid
					updateDataGrid(leftViewStatus);
					// Reset Search Field
					if(txtFilter) txtFilter.text = "";
				}
			}
			
			private function toMinutes(item:Object, column:GridColumn):String {
				if(item) {
					// Cast item Object
					var timeval:Number = 0;
					if(column.headerText == "Hold Time") {
						timeval = Number(item.Holdtime);
					} else if(column.headerText == "Last Call") {
						timeval = Number(item.LastCall);
					}

					var date:Date = new Date(timeval * 1000);
					return(date.minutes + " mins");
				}
				
				return "0 mins";
			}
			
			private function channelToName(item:Object, column:GridColumn):String {
				if(item) {
					
					// Channel RegExs
					var chn:RegExp	= new RegExp("^(.*)\/(.*)@(.*)$");
					var chn2:RegExp	= new RegExp("^(.*)\/(.*)$");
					
					// Data Validation
					var results:Array;
					if(chn.test(item.Name)) {
						results = String(item.Name).split(chn);
						return("Agent: " + results[2]);
					} else if(chn2.test(item.Name)) {
						return("Agent: " + results[2]);
						results = String(item.Name).split(chn2);
					} else {
						return String(item.Name);
					}
				}
				
				return "(Noname)";
			}
			
			protected function updateDataGrid(type:String):void {
				
				// Create Column type datas
				var cols:ArrayList = new ArrayList();
				var col:GridColumn = new GridColumn();
				
				// Check Datagrid Type
				switch(type) {
					case "Queues":
						// Set Data Provider
						gridStats.dataProvider = queuesDataProvider;
						
						// Setup Columns to Show
						col.headerText = "Queue";
						col.dataField  = "Queue";
						col.minWidth = 80;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Hold Time";
						col.dataField  = "Holdtime";
						col.labelFunction = toMinutes;
						col.width = 70;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Talk Time";
						col.dataField  = "TalkTime";
						col.width = 70;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Completed";
						col.dataField  = "Completed";
						col.width = 70;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Abandoned";
						col.dataField  = "Abandoned";
						col.width = 70;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Service Level";
						col.dataField  = "ServiceLevel";
						col.width = 70;
						cols.addItem(col);
						
						break;
					case "Agents":
						// Set Data Provider
						gridStats.dataProvider = queuesMemberDataProvider;
						
						// Setup Columns to Show
						col.headerText = "Name";
						col.dataField  = "Name";
						col.labelFunction = channelToName;
						col.minWidth = 80;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Queue";
						col.dataField  = "Queue";
						col.minWidth = 80;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Calls Taken";
						col.dataField  = "CallsTaken";
						col.width = 70;
						cols.addItem(col);
						col = new GridColumn();
						col.headerText = "Last Call";
						col.dataField  = "LastCall";
						col.width = 70;
						col.labelFunction = toMinutes;
						cols.addItem(col);
						
						break;
				}
				
				// Update DataGrid with created columns
				gridStats.columns = cols;
				
			}
			
			/**
			 * Switches between member or queue views
			 */
			protected function statsView_changeHandler(event:Event):void {
				switch (currentState) {
					case "Stats":
						currentState = "Calls";
						break;
					case "Calls":
						currentState = "Stats";
						break;
					default:
						currentState = "Calls";
						break;
				}
				
				// Reset Search Text Filter
				txtFilter.text = "";
			}
			
		]]>
	</fx:Script>
	
	<s:titleContent>
		<s:HGroup width="100%" height="60%" horizontalAlign="left" verticalAlign="middle" paddingLeft="10">
			<s:Label fontFamily="Ubuntu" fontSize="14" color="0xFFFFFF" text="{ 'Queued Calls: ' + gridCalls.dataProvider.length }" includeIn="Calls"/>
			<s:CheckBox  id="chkFilter" includeIn="Stats" change="{ searchDataProvider(event); }" fontFamily="Ubuntu-DG"/>
			<s:TextInput width="100%" fontFamily="_sans" id="txtFilter" prompt="Filter:" includeIn="Stats" change="{ searchDataProvider(event); }"/>
			<s:Spacer includeIn="Calls" width="100%"/>
		</s:HGroup>
	</s:titleContent>
	
	<s:actionContent>
		<!--<s:HGroup width="100%" height="60%" horizontalAlign="center" verticalAlign="middle" paddingRight="10">
			<s:ToggleButton id="viewToggleSwitch" selected="false" change="{ statsView_changeHandler(event); }"
						fontFamily="Ubuntu-DG" fontSize="20" label="Show Stats" height="50"/>-->
			<s:Button icon.Calls="@Embed('/assets/images/stats.png')" fontSize="20"
					  id="viewToggleSwitch" click="{ statsView_changeHandler(event); }"
					  icon.Stats="@Embed('/assets/images/call.png')" fontFamily="Ubuntu-DG"/>
		<!--</s:HGroup>-->
	</s:actionContent>
	
	<s:DataGrid visible="false" includeInLayout="false" visible.Calls="true" includeInLayout.Calls="true" fontFamily="Ubuntu" fontSize="12"
				id="gridCalls" width="100%" height="100%" dataProvider="{ callsDataProvider }">
		
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="CallerIDNum" headerText="Caller"/>
				<s:GridColumn dataField="Queue" headerText="Queue"/>
				<s:GridColumn dataField="Position" headerText="Position"/>
				<s:GridColumn dataField="Count" headerText="Count"/>
				<s:GridColumn dataField="DateTime" headerText="Time"/>
			</s:ArrayList>
		</s:columns>
		
	</s:DataGrid>
	
	<s:Group id="emptyMsgBox" left="0" right="0" top="0" bottom="0" alpha=".7" includeIn="Calls"
			 visible="{!callsDataProvider.length}" includeInLayout="{!callsDataProvider.length}">
		
		<s:Rect left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:SolidColor color="0x000000" />
			</s:fill>
		</s:Rect>
		
		<s:Label text="No queued calls ..." color="0xffffff" verticalCenter="0" horizontalCenter="0" />
	</s:Group>
	
	<s:DataGrid visible.Stats="true" includeInLayout.Stats="true" fontFamily="Ubuntu" fontSize="12"
				id="gridStats" width="100%" height="100%" visible="false" includeInLayout="false">
		<s:columns>
			<s:ArrayList>				
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
</s:View>
