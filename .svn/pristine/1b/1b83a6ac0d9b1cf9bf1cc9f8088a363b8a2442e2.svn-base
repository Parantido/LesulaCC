<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				autoDrawBackground="false" clipAndEnableScrolling="true"
				xmlns:classed="org.techfusion.view.components.classed.*" currentState="Base"
				contentBackgroundAlpha="0" dataChange="{ updateItem(); }" removedFromStage="{ data = null; }">
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
	</s:layout>
	
	<s:states>
		<s:State name="Base"/>
	</s:states>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.puremvc.as3.patterns.facade.Facade;
			import org.techfusion.events.AsteriskEvent;
			import org.techfusion.events.DatabaseViewEvent;
			import org.techfusion.view.components.PopupDialog;
			import org.techfusion.view.mediators.PeerCalloutViewMediator;
			
			[Bindable] public  var peerName:String				= null;
			[Bindable] private var peerStatus:String			= null;
			[Bindable] private var peerChannel:String			= null;
			[Bindable] private var peerDescription:String		= null;
			[Bindable] private var peerCallsDP:ArrayCollection	= null;
			
			// Context Buffer
			[Bindable] public  var contextDataProvider:ArrayCollection	= null;
			
			[Bindable] public  var bookmarkImage:String		= "/assets/images/bookmark.png";
			
			// Define Facade Placeholder
			private var facade:Facade = null;
			
			/**
			 * Callout Mediator Attach
			 */
			private function calloutActivate(event:Event):void {
				// Retrieve Facade Instance
				if(!facade) facade = ApplicationFacade.getInstance();
				
				// Attach Mediator to Callout Button
				if(!facade.hasMediator(PeerCalloutViewMediator.NAME)) {
					facade.registerMediator(new PeerCalloutViewMediator(this));
				}
				
				// Request Asterisk Contextes
				dispatchEvent(new AsteriskEvent(AsteriskEvent.GETCTXS));
			}
			
			/**
			 * Callout Mediator Detach
			 */
			private function calloutDeactivate(event:Event):void {
				// Retrieve Facade Instance
				if(!facade) facade = ApplicationFacade.getInstance();
				
				// Detach Mediator to Callout Button
				if(facade.hasMediator(PeerCalloutViewMediator.NAME)) {
					facade.removeMediator(PeerCalloutViewMediator.NAME);
				}
				
				// Garbage Collect Facade
				facade = null;
			}
			
			/**
			 * Return Node Childs Number
			 */
			private function countNodeChilds(node:XMLList):int {
				var counter:int = 0;
				
				for each (var child:XML in node) {
					if(String(child).length) counter++;
				}
				
				return(counter);
			}
			
			/**
			 * Initialize Item Renderer Values
			 */
			private function updateItem():void {
				if(data) {
					// Retrieve XML Object
					var xml:XML = XML(data);
					
					if(countNodeChilds(xml.ChannelsList)) {
						// Populate Data Provider
						peerCallsDP = new ArrayCollection();
						
						// Populate Data Provider
						for each (var child:XML in xml.ChannelsList.channel) {
							if(String(child).length && int(child.chanstate) > 0) {
								
								// Rework Call ID
								if(!String(child.callidnum).length) {
									child.callidnum = "Unknown";
								}
								
								// Add to Spinner List
								peerCallsDP.addItem(child);
							}
						}
						
						// Show Up Graphical Elements
						peersCallContainer.visible = peersCallContainerTitle.visible = true;
						peersCallContainer.includeInLayout = peersCallContainerTitle.includeInLayout = true;
					} else {
						// Hide Graphical Elements
						peersCallContainer.visible = peersCallContainerTitle.visible = false;
						peersCallContainer.includeInLayout = peersCallContainerTitle.includeInLayout = false;
					}
					
					// Populate Callout Button Appeareance
					coButton.label	= String(xml.ObjectName);
					
					// Populate Callout Content
					peerName		= String(xml.ObjectName);
					peerStatus		= String(xml.Status);
					peerDescription = String(xml.IPaddress);
					peerChannel		= String(xml.Channeltype) + "/" + String(xml.ObjectName);
					
					if(String(xml.IPport) != "0") {
						peerDescription	+= ":" + String(xml.IPport);
					}
					
					// Check Status
					if(String(xml.Status) == "UNKNOWN" || String(xml.Status) == "Unavailable" || String(xml.Status) == "Not Found") {
						
						// Set Style
						coButton.setStyle("chromeColor", "#898D90");
						titleBorderLine.color = 0x898D90;
						
						// Set Values
						coButton.toolTip		= null;
						
						// Set Display Icon
						coButton.setStyle("icon", "/assets/images/phonestatus/unavailable.png");
						
					} else if(String(xml.Status) == "In Use" || String(xml.Status) == "Busy" || String(xml.Status) == "Up") {
						
						// Set Style
						coButton.setStyle("chromeColor", "#EB4924");						
						titleBorderLine.color = 0xEB4924;
						
						// Set Display Icon
						coButton.setStyle("icon", "/assets/images/phonestatus/busy.png");
						
						if(String(xml.LastChannel)) {
							if(String(xml.OECallerID).length > 0) {
								peerDescription = String(xml.OECallerID);
							} else {
								peerDescription	= "anonymous";
							}
						}
						
						// Unify Status
						xml.Status = "Busy";
						
					} else if(String(xml.Status) == "Ringing" || String(xml.Status) == "Ring") {
						
						// Set Style
						coButton.setStyle("chromeColor", "#6BA300");
						titleBorderLine.color = 0x6BA300;
						
						// Set Display Icon
						coButton.setStyle("icon", "/assets/images/phonestatus/ringing.png");
						
						if(String(xml.LastChannel)) {
							if(String(xml.OECallerID).length > 0) {
								peerDescription = String(xml.OECallerID);
							} else {
								peerDescription = "anonymous";
							}
						}
						
					} else if(String(xml.Status) == "On Hold") {
						
						// Set Style
						coButton.setStyle("chromeColor", "#007FB1");
						titleBorderLine.color = 0x007FB1;
						
						// Set Display Icon
						coButton.setStyle("icon", "/assets/images/phonestatus/hold.png");
						
					} else {
						
						// Set Style
						coButton.setStyle("chromeColor", "#6BA300");
						titleBorderLine.color = 0x6BA300;
						
						// Set Values
						coButton.toolTip		= String(xml.Status);
						
						// Set Display Icon
						coButton.setStyle("icon", "/assets/images/phonestatus/available.png");
						
					}
				}
			}
			
			private function handleChannelChange():void {
			}
			
			/**
			 * Create New Popup Dialog
			 */
			private function handleActionPopup(): void {
				// Popup Object
				var popup:PopupDialog = new PopupDialog();
				
				// Get Selected Item
				var selectedCall:XML	= spinnerCalls.selectedItem as XML;
				
				// Convert Channel Syntax
				var chnnelExp:RegExp	= /(.*)_(.*)_(.*)/; 
				var chanItems:Array		= chnnelExp.exec(String(selectedCall.chanName));
				
				// Compose Chan Name
				var call:Object	= new Object();
				call.Channel	= chanItems[1] + "/" + chanItems[2] + "-" + chanItems[3];
				call.RetChannel	= chanItems[1] + "/" + chanItems[2];
				
				// Configure Popup Window
				popup.channel 		= call.Channel;
				popup.retchannel	= peerChannel;
				popup.context		= contextDataProvider;
				
				// Show & Center Popup
				popup.show();
				popup.center();
				
				// Close Callout Button
				calloutDeactivate(null);
			}
			
			/**
			 * Returns a well formatted field
			 */
			protected function lblFunction(item:Object):String{
				if(String(item.callidnum).length > 0)  
					return item.callidnum + ": " + item.chanstate + " (" + item.uniqueid + ")";
				else
					return "No CallerID : " + item.chanstate + " (" + item.uniqueid + ")";
			}
			
			
			/**
			 * Dispatch Bookmark event for selected Peer
			 */
			protected function handleBookmark():void {
				dispatchEvent(new DatabaseViewEvent(ApplicationFacade.DB_SETBOOKMARK));
			}
			
		]]>
	</fx:Script>
	
	<s:CalloutButton skinClass="assets.skins.PeerCalloutButtonSkin" id="coButton" label="Peer" fontFamily="Ubuntu-DG"
					 open="{ calloutActivate(event); }" close="{ calloutDeactivate(event); }">
		
		<s:calloutContent>

			<s:VGroup gap="0" horizontalAlign="center" verticalAlign="middle"
					  paddingBottom="5" paddingTop="10" paddingLeft="5" paddingRight="5">
				
				<s:SkinnableContainer id="titleContainer" width="98%" height="30" creationPolicy="all"
									  skinClass="assets.skins.customSkinnableContainer">
				
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="top" 
											paddingLeft="5" paddingRight="5" paddingTop="3"/>
					</s:layout>
					
					<s:Image id="imgBookmark" maxWidth="32" source="{ bookmarkImage }" click="{ handleBookmark(); }"/>
					
					<s:Label width="100%" height="100%" fontSize="16" fontWeight="bold" verticalAlign="middle"
							 maxDisplayedLines="1" text="{ peerName }" toolTip="{ peerName }" minWidth="150"
							 color="0xFFFFFF"/>
					
					<s:Line width="100%" visible="false"/>
					
					<s:Image maxWidth="32" source="@Embed('/assets/images/close.png')"
							 click="{ currentState = 'Base'; coButton.closeDropDown(); }"/>
				
				</s:SkinnableContainer>
				
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke id="titleBorderLine" color="black" weight="5"/>
					</s:stroke>
				</s:Line>
				
				<s:Spacer height="10"/>
				
				<s:Label width="100%" text="Details" textAlign="right" verticalAlign="middle" fontSize="12"
						 paddingRight="5"/>
				
				<s:BorderContainer id="bodyContainer" width="98%" height="50" creationPolicy="all" cornerRadius="5">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingTop="5"/>
					</s:layout>
					
					<s:VGroup width="100%" height="100%" paddingLeft="0" paddingRight="5" verticalAlign="middle">
						<s:Label width="100%" fontSize="14" paddingRight="5" text="{ peerStatus }"/>
						<s:Label width="100%" fontSize="14" maxDisplayedLines="1" paddingRight="5" 
								 text="{ peerDescription }" toolTip="{ peerDescription }"/>
					</s:VGroup>
				</s:BorderContainer>
				
				<s:Spacer height="10"/>
				
				<s:Label id="peersCallContainerTitle" width="100%" text="Channels" textAlign="right" verticalAlign="middle" fontSize="12"
						 paddingRight="5"/>
				
				<s:BorderContainer id="peersCallContainer" width="98%" creationPolicy="all" cornerRadius="5">
					<s:layout>
						<s:VerticalLayout horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
					</s:layout>
					
					<s:SpinnerListContainer width="100%" height="80">
						<s:SpinnerList id="list" width="20%" fontFamily="_sans" fontSize="10"
									   selectedIndex="{ spinnerCalls.selectedIndex }" fontWeight="bold">
							<s:dataProvider>
								<s:NumericDataProvider minimum="0" maximum="{ int(peerCallsDP.length - 1) }" stepSize="1" />
							</s:dataProvider>
						</s:SpinnerList>						
						<s:SpinnerList id="spinnerCalls" width="80%" height="60"
									   dataProvider="{ peerCallsDP }" fontFamily="_sans"
									   fontSize="10" fontWeight="bold" labelFunction="lblFunction"
									   selectedIndex="{ list.selectedIndex }" change="{ handleChannelChange(); }"/>
					</s:SpinnerListContainer>
					
					<s:Group width="100%" height="40">
						<s:layout>
							<s:HorizontalLayout horizontalAlign="center" gap="8" verticalAlign="middle"/>
						</s:layout>
						
						<s:Label text="Action" fontSize="11" fontWeight="bold"/>
						<s:Button icon="@Embed('/assets/images/more.png')" toolTip="Action" iconPlacement="left" width="32" height="32"
								  skinClass="assets.skins.ButtonBarLeftButtonSkin" label="Action" click="{ handleActionPopup(); }"/>
						
					</s:Group>
				</s:BorderContainer>
			</s:VGroup>
		</s:calloutContent>
		
	</s:CalloutButton>
	
</s:ItemRenderer>