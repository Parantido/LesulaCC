<?xml version="1.0" encoding="utf-8"?>
<!-- sparktextcontrols\mySkins\CustomTextInputSkin.mxml -->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
			 alpha.disabledStates="0.5" blendMode="normal">
	
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("org.techfusion.view.components.classed.CustomTextInput")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			
			private var paddingChanged:Boolean;
			
			static private const contentFill:Array		= ["bgFill"];
			private static const focusExclusions:Array	= ["textDisplay"];
			static private const exclusions_4_0:Array	= ["background", "textDisplay", "promptDisplay"];
			static private const exclusions:Array 		= ["background", "textDisplay", "promptDisplay", "border"];
			
			override public function get colorizeExclusions():Array  {
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5) {
					return exclusions_4_0;
				}
				return exclusions;
			}
			
			override public function get contentItems():Array {return contentFill};
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (paddingChanged) {
					updatePadding();
					paddingChanged = false;
				}
			}
			
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (getStyle("borderVisible") == true) {
					border.visible = true;
					shadow.visible = true;
					background.left = background.top = background.right = background.bottom = 1;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
					if (promptDisplay)
					{
						promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
						promptDisplay.setLayoutBoundsPosition(1, 1);
					}
				} else {
					border.visible = false;
					shadow.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
					if (promptDisplay) {
						promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
						promptDisplay.setLayoutBoundsPosition(0, 0);
					}
				}
				
				borderStroke.color = getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void {
				if (!textDisplay)
					return;
				
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
				
				if (!promptDisplay)
					return;
				
				padding = getStyle("paddingLeft");
				if (promptDisplay.getStyle("paddingLeft") != padding)
					promptDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (promptDisplay.getStyle("paddingTop") != padding)
					promptDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (promptDisplay.getStyle("paddingRight") != padding)
					promptDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (promptDisplay.getStyle("paddingBottom") != padding)
					promptDisplay.setStyle("paddingBottom", padding);
			}
			
			override public function styleChanged(styleProp:String):void {
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0) {
					paddingChanged = true;
					invalidateProperties();
				}
			}
			
			override public function get focusSkinExclusions():Array { return focusExclusions;};
		]]>
	</fx:Script>
	
	<!-- States -->
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<!-- Added to custom skin to cause prompt text to fade in. -->
	<s:transitions>
		<s:Transition toState="normalWithPrompt">
			<s:Fade targets="{promptDisplay}" duration="500"/>
		</s:Transition>
	</s:transitions>
	
	<!-- border --> 
	<s:Rect left="0" right="0" top="0" bottom="0" id="border">
		<s:stroke>     
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="1" />
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<s:Rect id="background" left="1" right="1" top="1" bottom="1"
			alpha="0.2" radiusX="5" radiusY="5">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFill" color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<!-- shadow -->
	<s:Rect left="1" top="1" right="1" height="1" id="shadow">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<!-- Text Input Text -->
	<s:RichEditableText id="textDisplay" verticalAlign="middle" widthInChars="10" 
						left="{ sideImage.width }" right="1" top="1" bottom="1"/>
	
	<!-- Text Input Prompt Text -->
	<s:Label id="promptDisplay" maxDisplayedLines="1" verticalAlign="middle" includeInLayout="false"
			 mouseEnabled="false" mouseChildren="false" includeIn="normalWithPrompt,disabledWithPrompt"
			 left="{ sideImage.width }" color="0xD8D8D8"/>
	
	<!-- Image -->
	<s:Image verticalAlign="middle" verticalCenter="0" horizontalAlign="left" horizontalCenter="0"
			 id="sideImage" source="{ hostComponent.sideImage }" width="32" height="32" left="5" right="5"/>
	
	<!-- Divider -->
	<s:Line x="42" verticalCenter="0" top="2" bottom="2">
		<s:stroke>
			<s:SolidColorStroke color="gray" weight="2" caps="round"/>
		</s:stroke>
	</s:Line>
	
</s:SparkSkin>